name: CI Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

env:
  RUST_BACKTRACE: 1
  RUST_LOG: debug
  NODE_ENV: test

jobs:
  rust-build:
    name: 🦀 Rust Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [1.70, stable]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-directories: |
            ~/.cargo/registry/cache
            ~/.cargo/registry/index
            ~/.cargo/git/db

      - name: Lint (Clippy)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Unit Tests (Quantization)
        run: cargo test --test quantization_test -- --nocapture

      - name: Build Examples
        run: cargo build --example zama_integer_sum --release

      - name: Feature Flag Tests
        run: |
          cargo test --no-default-features
          cargo test --all-features

      - name: Generate Coverage Report
        run: |
          cd /workspaces/blocksense-fhe-oracle
          cargo tarpaulin --out Xml --exclude-files tests/ --timeout 300 || true

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./cobertura.xml
          fail_ci_if_error: false
          verbose: true

      - name: Build Documentation
        run: |
          cd /workspaces/blocksense-fhe-oracle
          cargo doc --no-deps --document-private-items

  node-lint:
    name: 📦 Node.js Lint & Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install Root Dependencies
        run: npm ci

      - name: Install SDK Dependencies
        run: npm ci
        working-directory: sdk

      - name: Lint SDK
        run: npm run lint || npx eslint . || true
        working-directory: sdk

      - name: Unit Tests (Quantization JS)
        run: npm run test:quantization

      - name: SDK Integration Tests
        run: npm run test:sdk

      - name: Audit Dependencies
        run: npm audit --audit-level=moderate || true
        working-directory: sdk

  solidity-lint:
    name: 🔷 Solidity Lint & Contract Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install Contract Dependencies
        run: npm ci
        working-directory: contracts

      - name: Compile Contracts
        run: npm run compile
        working-directory: contracts

      - name: Solidity Linting
        run: npx solhint 'contracts/**/*.sol' || true
        working-directory: contracts

      - name: Run Hardhat Tests
        run: npm test
        working-directory: contracts

      - name: Generate Gas Report
        run: npm test 2>&1 | tee gas_report.txt || true
        working-directory: contracts

      - name: Gas Snapshot (Local Reference)
        run: cat gas_report.txt || echo "Gas report not available"
        working-directory: contracts

      - name: Contract Size Check
        run: npm run size-contracts 2>/dev/null || echo "Size check skipped"
        working-directory: contracts

      - name: Flatten Contract (Verification Ready)
        run: npm run flatten || echo "Flatten script not available"
        working-directory: contracts

  docs-check:
    name: 📚 Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Markdown Syntax
        run: |
          echo "✓ Checking Markdown files..."
          find docs -name "*.md" -type f | while read file; do
            echo "  Checking: $file"
            if grep -q "^#" "$file"; then
              echo "    ✓ Contains headers"
            fi
          done

      - name: Validate Architecture Consistency
        run: |
          echo "✓ Validating documentation cross-references..."
          ARCH_FILE="docs/ARCHITECTURE.md"
          ZAMA_FILE="docs/ZAMA-INTEGRATION.md"
          DIAG_FILE="docs/ARCHITECTURE-DIAGRAMS.md"
          
          if [ -f "$ARCH_FILE" ]; then
            echo "  ✓ ARCHITECTURE.md exists ($(wc -l < $ARCH_FILE) lines)"
          fi
          if [ -f "$ZAMA_FILE" ]; then
            echo "  ✓ ZAMA-INTEGRATION.md exists ($(wc -l < $ZAMA_FILE) lines)"
          fi
          if [ -f "$DIAG_FILE" ]; then
            echo "  ✓ ARCHITECTURE-DIAGRAMS.md exists ($(wc -l < $DIAG_FILE) lines)"
          fi

      - name: List Documentation Files
        run: |
          echo "📋 Documentation Structure:"
          find docs -type f -name "*.md" | sort | while read file; do
            lines=$(wc -l < "$file")
            echo "  • $(basename $file) - $lines lines"
          done

      - name: Link Checker (Basic)
        run: |
          echo "🔗 Checking documentation links..."
          cd docs
          for file in *.md; do
            echo "  Checking $file for dead references..."
            grep -o '\[.*\](' "$file" | wc -l | xargs echo "    Found external links:"
          done || true

  integration-tests:
    name: 🔗 End-to-End Integration Tests
    runs-on: ubuntu-latest
    needs: [rust-build, node-lint, solidity-lint]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Install Contract Dependencies
        run: npm ci
        working-directory: contracts

      - name: Start Hardhat Node (Background)
        run: |
          npm run node > hardhat.log 2>&1 &
          echo $! > hardhat.pid
          sleep 3
        working-directory: contracts

      - name: Deploy Contract Locally
        run: timeout 30 npm run deploy:local || echo "Deploy completed or timed out"
        working-directory: contracts

      - name: Run Integration Test Suite
        run: npm test 2>&1 | tee integration_results.txt
        working-directory: contracts

      - name: Verify Test Results
        run: |
          if grep -q "passing" integration_results.txt; then
            echo "✅ Integration tests completed"
          fi
        working-directory: contracts

      - name: Stop Hardhat Node
        if: always()
        run: |
          if [ -f hardhat.pid ]; then
            kill $(cat hardhat.pid) || true
          fi
        working-directory: contracts

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Check for Hardcoded Secrets
        run: |
          echo "🔍 Checking for hardcoded secrets..."
          if grep -r "PRIVATE_KEY" --include="*.js" --include="*.ts" --include="*.sol" . | grep -v ".env.example" | grep -v "template"; then
            echo "⚠️  WARNING: Possible hardcoded secrets found"
            exit 0
          else
            echo "✓ No hardcoded secrets detected"
          fi

      - name: Install Contract Dependencies
        run: npm ci
        working-directory: contracts

      - name: Run Slither (If Available)
        run: npx hardhat check-contracts 2>/dev/null || echo "Slither check skipped"
        working-directory: contracts

      - name: Dependency Vulnerability Scan
        run: |
          npm audit --json > audit_report.json || true
          cat audit_report.json | jq '.metadata.vulnerabilities' || echo "No audit data"
        working-directory: contracts

      - name: License Check
        run: |
          echo "📜 License: MIT (as per LICENSE file)"
          head -5 LICENSE

  status-badge:
    name: ✅ Pipeline Status Summary
    runs-on: ubuntu-latest
    needs: [rust-build, node-lint, solidity-lint, docs-check, integration-tests, security-audit]
    if: always()
    steps:
      - name: Determine Status
        run: |
          echo "🎯 CI Pipeline Complete"
          echo ""
          echo "Job Status Summary:"
          echo "  🦀 Rust Build: ${{ needs.rust-build.result }}"
          echo "  📦 Node Lint: ${{ needs.node-lint.result }}"
          echo "  🔷 Solidity: ${{ needs.solidity-lint.result }}"
          echo "  📚 Docs: ${{ needs.docs-check.result }}"
          echo "  🔗 Integration: ${{ needs.integration-tests.result }}"
          echo "  🔒 Security: ${{ needs.security-audit.result }}"
          echo ""
          if [[ "${{ needs.rust-build.result }}" == "success" && \
                "${{ needs.node-lint.result }}" == "success" && \
                "${{ needs.solidity-lint.result }}" == "success" && \
                "${{ needs.docs-check.result }}" == "success" ]]; then
            echo "✅ All critical checks passed"
            exit 0
          else
            echo "⚠️  Some checks failed or were skipped"
            exit 0
          fi
